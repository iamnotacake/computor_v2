use crate::Expr;

grammar;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut vec = v;
            vec.push(e);
            vec
        }
    }
};

Semicolon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut vec = v;
            vec.push(e);
            vec
        }
    }
};

pub RootExpr: Expr = {
    AssignVar,
    AssignFunc,
    AddSub,
}

AssignVar: Expr = {
    <var:Variable> "=" <val:AddSub> => Expr::AssignVar(var, box val),
}

AssignFunc: Expr = {
    <var:Variable> "(" <args:Comma<Variable>> ")" "=" <val:AddSub>
        => Expr::AssignFunc(var, args, box val),
}

AddSub: Expr = {
    <x:AddSub> "+" <y:MulDiv> => Expr::Add(box x, box y),
    <x:AddSub> "-" <y:MulDiv> => Expr::Add(box x, box Expr::Neg(box y)),
    MulDiv,
}

MulDiv: Expr = {
    <x:MulDiv> "*" <y:Pow> => Expr::Mul(box x, box y),
    <x:MulDiv> "/" <y:Pow> => Expr::Div(box x, box y),
    <x:MulDiv> "%" <y:Pow> => Expr::Rem(box x, box y),
    <x:MulDiv> "**" <y:Pow> => Expr::MatrixMul(box x, box y),
    Pow,
}

Pow: Expr = {
    <x:Pow> "^" <y:Term> => Expr::Pow(box x, box y),
    Term,
}

Term: Expr = {
    Complex,
    Real,
    Var,
    Matrix,
    "(" <AddSub> ")",
    Neg,
}

Neg: Expr = {
    "-" <x:Term> => Expr::Neg(box x),
}

Real: Expr = {
    <x:Number> => Expr::Real(x),
}

Complex: Expr = {
    <x:Number> "i" => Expr::Complex(0.0, x),
}

Var: Expr = {
    <x:Variable> => Expr::Var(x),
}


Variable: String = {
    <x:r"[a-hj-zA-HJ-Z][a-zA-Z]*"> => x.to_lowercase(),
}

Number: f64 = {
    <x:r"-?[0-9]+(\.[0-9]+)?"> => x.parse().unwrap(),
}


MatrixRow: Vec<f64> = {
    "[" <x:Comma<Number>> "]" => x,
}

Matrix: Expr = {
	"[" <x:Semicolon<MatrixRow>> "]" => Expr::Matrix(x),
}
